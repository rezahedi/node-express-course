1. In this lesson, you created a middleware function called asyncWrapper. Why?

It's because to try and catch errors in asyncronous functions in our controllers, by asyncWrapper middleware and remove all the repeated error handling try/catch blocks from our controllers, This way we creating a reusable middleware that also runs asyncronously too.


2. Suppose that you want to make sure that both a status code and an error message are sent back to the user when they request the URL for a task that does not exist. Assume that youâ€™ve created a CustomAPIError class and an error handler that references that class. Complete the code:

const getTask = asyncWrapper(async (req, res, next) => {  
  const { id: taskID } = req.params;  
  const task = await Task.findOne({ _id: taskID });  
  if (!task) {  
    return next( new CustomAPIError(`Task with id ${taskId} not found.`, 404) )
  }  
  res.status(200).json({ task });  
});
